{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","personService","getAll","axios","get","then","response","data","create","newPerson","post","remove","id","delete","update","put","Filter","search","handleSearchChange","value","onChange","PersonForm","addPerson","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","type","Person","name","number","deletePerson","onClick","Persons","filteredPeople","map","person","Notification","message","styleName","className","App","useState","persons","setPersons","setNewName","setNewNumber","setSearch","notification","setNotification","notificationStyle","setNotificationStyle","useEffect","personList","length","filter","toLowerCase","includes","event","target","preventDefault","find","window","confirm","updatedPerson","p","catch","error","setTimeout","addedPerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e13f69a9.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n  const response = axios.get(baseUrl);\n  return response.then((response) => response.data);\n};\n\nconst create = (newPerson) => {\n  const response = axios.post(baseUrl, newPerson);\n  return response.then((response) => response.data);\n};\n\nconst remove = (id) => {\n  return axios.delete(`${baseUrl}/${id}`);\n};\n\nconst update = (id, newPerson) => {\n  const response = axios.put(`${baseUrl}/${id}`, newPerson);\n  return response.then((response) => response.data);\n};\n\nconst personService = { getAll, create, remove, update };\nexport default personService;\n","import React, { useState, useEffect } from \"react\";\nimport personService from \"./services/persons\";\n\nconst Filter = ({ search, handleSearchChange }) => (\n  <div>\n    filter shown with <input value={search} onChange={handleSearchChange} />\n  </div>\n);\n\nconst PersonForm = ({\n  addPerson,\n  newName,\n  newNumber,\n  handleNameChange,\n  handleNumberChange,\n}) => (\n  <form onSubmit={addPerson}>\n    <div>\n      name: <input value={newName} onChange={handleNameChange} />\n    </div>\n    <div>\n      number: <input value={newNumber} onChange={handleNumberChange} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n);\n\nconst Person = ({ name, number, deletePerson }) => (\n  <div>\n    {name} {number} <button onClick={deletePerson}>delete</button>\n  </div>\n);\n\nconst Persons = ({ filteredPeople, deletePerson }) => {\n  return (\n    <>\n      {filteredPeople.map((person) => (\n        <Person\n          key={person.name}\n          name={person.name}\n          number={person.number}\n          deletePerson={() => deletePerson(person.id)}\n        />\n      ))}\n    </>\n  );\n};\n\nconst Notification = ({ message, styleName }) => {\n  if (message == null) return null;\n\n  return <div className={styleName}>{message}</div>;\n};\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [search, setSearch] = useState(\"\");\n  const [notification, setNotification] = useState(null);\n  const [notificationStyle, setNotificationStyle] = useState(\"\");\n\n  useEffect(() => {\n    personService.getAll().then((personList) => {\n      setPersons(personList);\n    });\n  }, []);\n\n  const addPerson = (event) => {\n    event.preventDefault();\n    const person = persons.find((person) => person.name === newName);\n\n    const newPerson = {\n      name: newName,\n      number: newNumber,\n    };\n\n    if (person) {\n      const replacing = window.confirm(\n        `${newName} is already added to phonebook, replace the old number with a new one?`\n      );\n\n      if (replacing) {\n        personService\n          .update(person.id, newPerson)\n          .then((updatedPerson) => {\n            setPersons(\n              persons.map((p) => (p.id !== person.id ? p : updatedPerson))\n            );\n          })\n          .catch((error) => {\n            setNotificationStyle(\"error\");\n            setNotification(\n              `Information of ${person.name} has already been removed from server`\n            );\n            setTimeout(() => setNotification(null), 5000);\n          });\n      }\n\n      setNewName(\"\");\n      setNewNumber(\"\");\n      return;\n    }\n\n    personService\n      .create(newPerson)\n      .then((addedPerson) => {\n        setPersons(persons.concat(addedPerson));\n        setNotificationStyle(\"notification\");\n        setNotification(`Added ${addedPerson.name}`);\n        setTimeout(() => setNotification(null), 5000);\n        setNewName(\"\");\n        setNewNumber(\"\");\n      })\n      .catch((error) => {\n        setNotificationStyle(\"error\");\n        setNotification(error.response.data.error);\n        setTimeout(() => setNotification(null), 5000);\n      });\n  };\n\n  const removePerson = (id) => {\n    const person = persons.find((person) => person.id === id);\n\n    if (!window.confirm(`Delete ${person.name}?`)) return;\n\n    personService\n      .remove(id)\n      .then((response) => {\n        setPersons(persons.filter((person) => person.id !== id));\n      })\n      .catch((error) => {\n        setNotificationStyle(\"error\");\n        setNotification(\n          `Information of ${person.name} has already been removed from server`\n        );\n        setTimeout(() => setNotification(null), 5000);\n        setPersons(persons.filter((person) => person.id !== id));\n      });\n  };\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleSearchChange = (event) => {\n    setSearch(event.target.value);\n  };\n\n  const filteredPeople =\n    search.length === 0\n      ? persons\n      : persons.filter((person) =>\n          person.name.toLowerCase().includes(search.toLowerCase())\n        );\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification} styleName={notificationStyle} />\n      <Filter search={search} handleSearchChange={handleSearchChange} />\n      <h3>add a new</h3>\n      <PersonForm\n        addPerson={addPerson}\n        newName={newName}\n        newNumber={newNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <h3>Numbers</h3>\n      <Persons filteredPeople={filteredPeople} deletePerson={removePerson} />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}